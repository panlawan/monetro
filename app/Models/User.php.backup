<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Storage;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    protected $fillable = [
        'name',
        'email',
        'password',
        'avatar',
        'phone',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    // Avatar URL helper with proper debugging
    public function getAvatarUrlAttribute()
    {
        \Log::info('Getting avatar URL', [
            'user_id' => $this->id,
            'avatar_path' => $this->avatar
        ]);

        if ($this->avatar) {
            // Clean path - remove any 'storage/' prefix if exists
            $cleanPath = str_replace('storage/', '', $this->avatar);
            
            // Check if file exists in storage
            if (Storage::disk('public')->exists($cleanPath)) {
                $url = asset('storage/' . $cleanPath);
                \Log::info('Avatar URL generated', ['url' => $url]);
                return $url;
            } else {
                \Log::warning('Avatar file not found', [
                    'path' => $cleanPath,
                    'full_path' => storage_path('app/public/' . $cleanPath)
                ]);
            }
        }
        
        // Default avatar
        $defaultUrl = 'https://ui-avatars.com/api/?name=' . urlencode($this->name) . '&background=6366f1&color=ffffff&size=200';
        \Log::info('Using default avatar', ['url' => $defaultUrl]);
        return $defaultUrl;
    }
}

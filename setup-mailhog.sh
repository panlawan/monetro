#!/bin/bash
# üìß Setup Mailhog Email Verification

echo "üìß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Mailhog Email Verification..."

# 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Mailhog Container
echo "üê≥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Mailhog Container..."
if docker-compose ps | grep -q mailhog; then
    echo "‚úÖ Mailhog container ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
else
    echo "‚ö†Ô∏è  Mailhog container ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô..."
    docker-compose up -d mailhog
fi

# 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï .env ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mailhog
echo "‚öôÔ∏è  ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï .env Configuration..."
cp .env .env.backup.$(date +%Y%m%d_%H%M%S)

# Remove existing mail configuration
sed -i '/^MAIL_/d' .env

# Add Mailhog configuration
cat >> .env << 'EOF'

# Mail Configuration (Mailhog)
MAIL_MAILER=smtp
MAIL_HOST=mailhog
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="noreply@example.com"
MAIL_FROM_NAME="${APP_NAME}"
EOF

echo "‚úÖ .env ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß"

# 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Email Verification Customization
echo "üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Email Verification..."

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Verify Email Notification
mkdir -p app/Notifications
cat > app/Notifications/CustomVerifyEmail.php << 'EOF'
<?php

namespace App\Notifications;

use Illuminate\Auth\Notifications\VerifyEmail as VerifyEmailBase;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;

class CustomVerifyEmail extends VerifyEmailBase implements ShouldQueue
{
    use Queueable;

    /**
     * Build the mail representation of the notification.
     */
    public function toMail($notifiable): MailMessage
    {
        $verificationUrl = $this->verificationUrl($notifiable);

        return (new MailMessage)
            ->subject('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì - ' . config('app.name'))
            ->greeting('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ' . $notifiable->name . '!')
            ->line('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
            ->action('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•', $verificationUrl)
            ->line('‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡πÜ')
            ->line('‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 60 ‡∏ô‡∏≤‡∏ó‡∏µ')
            ->salutation('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì,<br>' . config('app.name'));
    }
}
EOF

# 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï User Model ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Custom Notification
echo "üë§ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï User Model..."
# Add sendEmailVerificationNotification method to User model
cat >> app/Models/User.php << 'EOF'

    /**
     * Send the email verification notification.
     */
    public function sendEmailVerificationNotification()
    {
        $this->notify(new \App\Notifications\CustomVerifyEmail);
    }
EOF

# 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Email Verification Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Custom Actions
echo "üéõÔ∏è  ‡∏™‡∏£‡πâ‡∏≤‡∏á Email Verification Controller..."
cat > app/Http/Controllers/EmailVerificationController.php << 'EOF'
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;

class EmailVerificationController extends Controller
{
    /**
     * Display the email verification prompt.
     */
    public function show(Request $request): View
    {
        return $request->user()->hasVerifiedEmail()
                    ? redirect()->intended(route('dashboard'))
                    : view('auth.verify-email');
    }

    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard'));
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}
EOF

# 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Email Verification View
echo "üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Email Verification View..."
mkdir -p resources/views/auth
cat > resources/views/auth/verify-email.blade.php << 'EOF'
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å! ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ') }}
    </div>

    @if (session('status') == 'verification-link-sent')
        <div class="mb-4 font-medium text-sm text-green-600">
            {{ __('‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß') }}
        </div>
    @endif

    <div class="mt-4 flex items-center justify-between">
        <form method="POST" action="{{ route('verification.send') }}">
            @csrf

            <div>
                <x-primary-button>
                    {{ __('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á') }}
                </x-primary-button>
            </div>
        </form>

        <form method="POST" action="{{ route('logout') }}">
            @csrf

            <button type="submit" class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                {{ __('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö') }}
            </button>
        </form>
    </div>

    <!-- Mailhog Debug Info -->
    @if(config('app.debug'))
        <div class="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-md">
            <div class="flex">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div class="ml-3">
                    <h3 class="text-sm font-medium text-blue-800">
                        üß™ Development Mode - Mailhog
                    </h3>
                    <div class="mt-2 text-sm text-blue-700">
                        <p>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: <a href="http://localhost:8025" target="_blank" class="underline font-medium">Mailhog Web UI</a></p>
                        <p class="text-xs mt-1">‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Mailhog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</p>
                    </div>
                </div>
            </div>
        </div>
    @endif
</x-guest-layout>
EOF

# 7. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Email Verification
echo "üõ£Ô∏è  ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Email Verification Routes..."
if ! grep -q "verification.send" routes/web.php; then
    cat >> routes/web.php << 'EOF'

// Custom Email Verification Routes
Route::middleware('auth')->group(function () {
    Route::get('/email/verify', [App\Http\Controllers\EmailVerificationController::class, 'show'])
        ->name('verification.notice');
    
    Route::post('/email/verification-notification', [App\Http\Controllers\EmailVerificationController::class, 'store'])
        ->middleware('throttle:6,1')
        ->name('verification.send');
});
EOF
fi

# 8. ‡∏™‡∏£‡πâ‡∏≤‡∏á Command ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Email
echo "üß™ ‡∏™‡∏£‡πâ‡∏≤‡∏á Test Email Command..."
cat > app/Console/Commands/TestEmailCommand.php << 'EOF'
<?php

namespace App\Console\Commands;

use App\Models\User;
use App\Notifications\CustomVerifyEmail;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Mail;

class TestEmailCommand extends Command
{
    protected $signature = 'test:email {--user=1}';
    protected $description = 'Send a test email verification to user';

    public function handle()
    {
        $userId = $this->option('user');
        $user = User::find($userId);

        if (!$user) {
            $this->error('User not found');
            return;
        }

        $this->info("Sending test email to: {$user->email}");

        try {
            $user->notify(new CustomVerifyEmail);
            $this->info('‚úÖ Email sent successfully!');
            $this->info('üåê Check Mailhog at: http://localhost:8025');
        } catch (\Exception $e) {
            $this->error('‚ùå Failed to send email: ' . $e->getMessage());
        }
    }
}
EOF

# 9. ‡∏™‡∏£‡πâ‡∏≤‡∏á Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Email
echo "üõ°Ô∏è  ‡∏™‡∏£‡πâ‡∏≤‡∏á Email Verification Middleware..."
cat > app/Http/Middleware/EnsureEmailIsVerified.php << 'EOF'
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Symfony\Component\HttpFoundation\Response;

class EnsureEmailIsVerified
{
    public function handle(Request $request, Closure $next): Response
    {
        if (! $request->user() ||
            ($request->user() instanceof MustVerifyEmail &&
            ! $request->user()->hasVerifiedEmail())) {
            return $request->expectsJson()
                    ? abort(409, 'Your email address is not verified.')
                    : redirect()->route('verification.notice');
        }

        return $next($request);
    }
}
EOF

# 10. ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard Badge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Email Status
echo "üé® ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Email Status..."
# ‡πÄ‡∏û‡∏¥‡πà‡∏° email verification status ‡πÉ‡∏ô dashboard
sed -i 's/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß/‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß/g' resources/views/dashboard.blade.php
sed -i 's/‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô/‚ö†Ô∏è ‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô/g' resources/views/dashboard.blade.php

# 11. Clear configs ‡πÅ‡∏•‡∏∞ restart services
echo "üßπ Clear configurations..."
php artisan config:clear
php artisan route:clear
php artisan view:clear
php artisan cache:clear

# Register the test command
php artisan optimize

echo ""
echo "üéâ Mailhog Email Verification Setup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
echo ""
echo "üåê Access Points:"
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ üìß Mailhog Web UI: http://localhost:8025 ‚îÇ"
echo "‚îÇ üè† Application:   http://localhost:8080  ‚îÇ"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
echo ""
echo "üß™ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:"
echo "1. ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ User ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"
echo "2. ‡∏™‡πà‡∏á Test Email:"
echo "   php artisan test:email --user=1"
echo "3. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô Mailhog: http://localhost:8025"
echo ""
echo "‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:"
echo "‚Ä¢ User ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ verification"
echo "‚Ä¢ ‡∏Ñ‡∏•‡∏¥‡∏Å '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà"
echo "‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô Mailhog ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
echo ""
echo "üîß Debug Commands:"
echo "‚Ä¢ php artisan test:email --user=1"
echo "‚Ä¢ php artisan queue:work (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Queue)"
echo "‚Ä¢ docker-compose logs mailhog"
echo ""
echo "‚ú® Features:"
echo "‚Ä¢ ‚úÖ Custom Thai Email Templates"
echo "‚Ä¢ ‚úÖ Mailhog Integration"
echo "‚Ä¢ ‚úÖ Email Verification UI"
echo "‚Ä¢ ‚úÖ Test Commands"
echo "‚Ä¢ ‚úÖ Queue Support"
echo ""
echo "üöÄ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß!"